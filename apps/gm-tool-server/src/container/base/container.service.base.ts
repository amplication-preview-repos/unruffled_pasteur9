/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Container as PrismaContainer } from "@prisma/client";

export class ContainerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ContainerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.container.count(args);
  }

  async containers(
    args: Prisma.ContainerFindManyArgs
  ): Promise<PrismaContainer[]> {
    return this.prisma.container.findMany(args);
  }
  async container(
    args: Prisma.ContainerFindUniqueArgs
  ): Promise<PrismaContainer | null> {
    return this.prisma.container.findUnique(args);
  }
  async createContainer(
    args: Prisma.ContainerCreateArgs
  ): Promise<PrismaContainer> {
    return this.prisma.container.create(args);
  }
  async updateContainer(
    args: Prisma.ContainerUpdateArgs
  ): Promise<PrismaContainer> {
    return this.prisma.container.update(args);
  }
  async deleteContainer(
    args: Prisma.ContainerDeleteArgs
  ): Promise<PrismaContainer> {
    return this.prisma.container.delete(args);
  }
}
