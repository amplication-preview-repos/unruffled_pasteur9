/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserFieldService } from "../userField.service";
import { UserFieldCreateInput } from "./UserFieldCreateInput";
import { UserField } from "./UserField";
import { UserFieldFindManyArgs } from "./UserFieldFindManyArgs";
import { UserFieldWhereUniqueInput } from "./UserFieldWhereUniqueInput";
import { UserFieldUpdateInput } from "./UserFieldUpdateInput";

export class UserFieldControllerBase {
  constructor(protected readonly service: UserFieldService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserField })
  async createUserField(
    @common.Body() data: UserFieldCreateInput
  ): Promise<UserField> {
    return await this.service.createUserField({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        entity: true,
        name: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserField] })
  @ApiNestedQuery(UserFieldFindManyArgs)
  async userFields(@common.Req() request: Request): Promise<UserField[]> {
    const args = plainToClass(UserFieldFindManyArgs, request.query);
    return this.service.userFields({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        entity: true,
        name: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userField(
    @common.Param() params: UserFieldWhereUniqueInput
  ): Promise<UserField | null> {
    const result = await this.service.userField({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        entity: true,
        name: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserField(
    @common.Param() params: UserFieldWhereUniqueInput,
    @common.Body() data: UserFieldUpdateInput
  ): Promise<UserField | null> {
    try {
      return await this.service.updateUserField({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          typeField: true,
          entity: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserField(
    @common.Param() params: UserFieldWhereUniqueInput
  ): Promise<UserField | null> {
    try {
      return await this.service.deleteUserField({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          typeField: true,
          entity: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
