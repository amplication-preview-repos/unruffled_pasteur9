/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PropertyGroupService } from "../propertyGroup.service";
import { PropertyGroupCreateInput } from "./PropertyGroupCreateInput";
import { PropertyGroup } from "./PropertyGroup";
import { PropertyGroupFindManyArgs } from "./PropertyGroupFindManyArgs";
import { PropertyGroupWhereUniqueInput } from "./PropertyGroupWhereUniqueInput";
import { PropertyGroupUpdateInput } from "./PropertyGroupUpdateInput";

export class PropertyGroupControllerBase {
  constructor(protected readonly service: PropertyGroupService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PropertyGroup })
  async createPropertyGroup(
    @common.Body() data: PropertyGroupCreateInput
  ): Promise<PropertyGroup> {
    return await this.service.createPropertyGroup({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        parent: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PropertyGroup] })
  @ApiNestedQuery(PropertyGroupFindManyArgs)
  async propertyGroups(
    @common.Req() request: Request
  ): Promise<PropertyGroup[]> {
    const args = plainToClass(PropertyGroupFindManyArgs, request.query);
    return this.service.propertyGroups({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        parent: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PropertyGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async propertyGroup(
    @common.Param() params: PropertyGroupWhereUniqueInput
  ): Promise<PropertyGroup | null> {
    const result = await this.service.propertyGroup({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        parent: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PropertyGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePropertyGroup(
    @common.Param() params: PropertyGroupWhereUniqueInput,
    @common.Body() data: PropertyGroupUpdateInput
  ): Promise<PropertyGroup | null> {
    try {
      return await this.service.updatePropertyGroup({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          parent: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PropertyGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePropertyGroup(
    @common.Param() params: PropertyGroupWhereUniqueInput
  ): Promise<PropertyGroup | null> {
    try {
      return await this.service.deletePropertyGroup({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          parent: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
