/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Npc } from "./Npc";
import { NpcCountArgs } from "./NpcCountArgs";
import { NpcFindManyArgs } from "./NpcFindManyArgs";
import { NpcFindUniqueArgs } from "./NpcFindUniqueArgs";
import { DeleteNpcArgs } from "./DeleteNpcArgs";
import { NpcService } from "../npc.service";
@graphql.Resolver(() => Npc)
export class NpcResolverBase {
  constructor(protected readonly service: NpcService) {}

  async _npcsMeta(
    @graphql.Args() args: NpcCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Npc])
  async npcs(@graphql.Args() args: NpcFindManyArgs): Promise<Npc[]> {
    return this.service.npcs(args);
  }

  @graphql.Query(() => Npc, { nullable: true })
  async npc(@graphql.Args() args: NpcFindUniqueArgs): Promise<Npc | null> {
    const result = await this.service.npc(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Npc)
  async deleteNpc(@graphql.Args() args: DeleteNpcArgs): Promise<Npc | null> {
    try {
      return await this.service.deleteNpc(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
