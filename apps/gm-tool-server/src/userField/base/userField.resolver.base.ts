/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserField } from "./UserField";
import { UserFieldCountArgs } from "./UserFieldCountArgs";
import { UserFieldFindManyArgs } from "./UserFieldFindManyArgs";
import { UserFieldFindUniqueArgs } from "./UserFieldFindUniqueArgs";
import { CreateUserFieldArgs } from "./CreateUserFieldArgs";
import { UpdateUserFieldArgs } from "./UpdateUserFieldArgs";
import { DeleteUserFieldArgs } from "./DeleteUserFieldArgs";
import { UserFieldService } from "../userField.service";
@graphql.Resolver(() => UserField)
export class UserFieldResolverBase {
  constructor(protected readonly service: UserFieldService) {}

  async _userFieldsMeta(
    @graphql.Args() args: UserFieldCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserField])
  async userFields(
    @graphql.Args() args: UserFieldFindManyArgs
  ): Promise<UserField[]> {
    return this.service.userFields(args);
  }

  @graphql.Query(() => UserField, { nullable: true })
  async userField(
    @graphql.Args() args: UserFieldFindUniqueArgs
  ): Promise<UserField | null> {
    const result = await this.service.userField(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserField)
  async createUserField(
    @graphql.Args() args: CreateUserFieldArgs
  ): Promise<UserField> {
    return await this.service.createUserField({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserField)
  async updateUserField(
    @graphql.Args() args: UpdateUserFieldArgs
  ): Promise<UserField | null> {
    try {
      return await this.service.updateUserField({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserField)
  async deleteUserField(
    @graphql.Args() args: DeleteUserFieldArgs
  ): Promise<UserField | null> {
    try {
      return await this.service.deleteUserField(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
