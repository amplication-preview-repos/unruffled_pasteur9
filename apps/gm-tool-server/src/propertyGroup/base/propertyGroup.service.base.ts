/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PropertyGroup as PrismaPropertyGroup } from "@prisma/client";

export class PropertyGroupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PropertyGroupCountArgs, "select">
  ): Promise<number> {
    return this.prisma.propertyGroup.count(args);
  }

  async propertyGroups(
    args: Prisma.PropertyGroupFindManyArgs
  ): Promise<PrismaPropertyGroup[]> {
    return this.prisma.propertyGroup.findMany(args);
  }
  async propertyGroup(
    args: Prisma.PropertyGroupFindUniqueArgs
  ): Promise<PrismaPropertyGroup | null> {
    return this.prisma.propertyGroup.findUnique(args);
  }
  async createPropertyGroup(
    args: Prisma.PropertyGroupCreateArgs
  ): Promise<PrismaPropertyGroup> {
    return this.prisma.propertyGroup.create(args);
  }
  async updatePropertyGroup(
    args: Prisma.PropertyGroupUpdateArgs
  ): Promise<PrismaPropertyGroup> {
    return this.prisma.propertyGroup.update(args);
  }
  async deletePropertyGroup(
    args: Prisma.PropertyGroupDeleteArgs
  ): Promise<PrismaPropertyGroup> {
    return this.prisma.propertyGroup.delete(args);
  }
}
