/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UserField as PrismaUserField } from "@prisma/client";

export class UserFieldServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserFieldCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userField.count(args);
  }

  async userFields(
    args: Prisma.UserFieldFindManyArgs
  ): Promise<PrismaUserField[]> {
    return this.prisma.userField.findMany(args);
  }
  async userField(
    args: Prisma.UserFieldFindUniqueArgs
  ): Promise<PrismaUserField | null> {
    return this.prisma.userField.findUnique(args);
  }
  async createUserField(
    args: Prisma.UserFieldCreateArgs
  ): Promise<PrismaUserField> {
    return this.prisma.userField.create(args);
  }
  async updateUserField(
    args: Prisma.UserFieldUpdateArgs
  ): Promise<PrismaUserField> {
    return this.prisma.userField.update(args);
  }
  async deleteUserField(
    args: Prisma.UserFieldDeleteArgs
  ): Promise<PrismaUserField> {
    return this.prisma.userField.delete(args);
  }
}
