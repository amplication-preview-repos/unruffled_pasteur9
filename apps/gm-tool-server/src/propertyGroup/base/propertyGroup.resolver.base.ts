/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PropertyGroup } from "./PropertyGroup";
import { PropertyGroupCountArgs } from "./PropertyGroupCountArgs";
import { PropertyGroupFindManyArgs } from "./PropertyGroupFindManyArgs";
import { PropertyGroupFindUniqueArgs } from "./PropertyGroupFindUniqueArgs";
import { CreatePropertyGroupArgs } from "./CreatePropertyGroupArgs";
import { UpdatePropertyGroupArgs } from "./UpdatePropertyGroupArgs";
import { DeletePropertyGroupArgs } from "./DeletePropertyGroupArgs";
import { PropertyGroupService } from "../propertyGroup.service";
@graphql.Resolver(() => PropertyGroup)
export class PropertyGroupResolverBase {
  constructor(protected readonly service: PropertyGroupService) {}

  async _propertyGroupsMeta(
    @graphql.Args() args: PropertyGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PropertyGroup])
  async propertyGroups(
    @graphql.Args() args: PropertyGroupFindManyArgs
  ): Promise<PropertyGroup[]> {
    return this.service.propertyGroups(args);
  }

  @graphql.Query(() => PropertyGroup, { nullable: true })
  async propertyGroup(
    @graphql.Args() args: PropertyGroupFindUniqueArgs
  ): Promise<PropertyGroup | null> {
    const result = await this.service.propertyGroup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PropertyGroup)
  async createPropertyGroup(
    @graphql.Args() args: CreatePropertyGroupArgs
  ): Promise<PropertyGroup> {
    return await this.service.createPropertyGroup({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PropertyGroup)
  async updatePropertyGroup(
    @graphql.Args() args: UpdatePropertyGroupArgs
  ): Promise<PropertyGroup | null> {
    try {
      return await this.service.updatePropertyGroup({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PropertyGroup)
  async deletePropertyGroup(
    @graphql.Args() args: DeletePropertyGroupArgs
  ): Promise<PropertyGroup | null> {
    try {
      return await this.service.deletePropertyGroup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
