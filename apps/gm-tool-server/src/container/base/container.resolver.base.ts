/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Container } from "./Container";
import { ContainerCountArgs } from "./ContainerCountArgs";
import { ContainerFindManyArgs } from "./ContainerFindManyArgs";
import { ContainerFindUniqueArgs } from "./ContainerFindUniqueArgs";
import { CreateContainerArgs } from "./CreateContainerArgs";
import { UpdateContainerArgs } from "./UpdateContainerArgs";
import { DeleteContainerArgs } from "./DeleteContainerArgs";
import { ContainerService } from "../container.service";
@graphql.Resolver(() => Container)
export class ContainerResolverBase {
  constructor(protected readonly service: ContainerService) {}

  async _containersMeta(
    @graphql.Args() args: ContainerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Container])
  async containers(
    @graphql.Args() args: ContainerFindManyArgs
  ): Promise<Container[]> {
    return this.service.containers(args);
  }

  @graphql.Query(() => Container, { nullable: true })
  async container(
    @graphql.Args() args: ContainerFindUniqueArgs
  ): Promise<Container | null> {
    const result = await this.service.container(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Container)
  async createContainer(
    @graphql.Args() args: CreateContainerArgs
  ): Promise<Container> {
    return await this.service.createContainer({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Container)
  async updateContainer(
    @graphql.Args() args: UpdateContainerArgs
  ): Promise<Container | null> {
    try {
      return await this.service.updateContainer({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Container)
  async deleteContainer(
    @graphql.Args() args: DeleteContainerArgs
  ): Promise<Container | null> {
    try {
      return await this.service.deleteContainer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
