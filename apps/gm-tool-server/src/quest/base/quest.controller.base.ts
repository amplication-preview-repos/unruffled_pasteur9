/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QuestService } from "../quest.service";
import { QuestCreateInput } from "./QuestCreateInput";
import { Quest } from "./Quest";
import { QuestFindManyArgs } from "./QuestFindManyArgs";
import { QuestWhereUniqueInput } from "./QuestWhereUniqueInput";
import { QuestUpdateInput } from "./QuestUpdateInput";

export class QuestControllerBase {
  constructor(protected readonly service: QuestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Quest })
  async createQuest(@common.Body() data: QuestCreateInput): Promise<Quest> {
    return await this.service.createQuest({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Quest] })
  @ApiNestedQuery(QuestFindManyArgs)
  async quests(@common.Req() request: Request): Promise<Quest[]> {
    const args = plainToClass(QuestFindManyArgs, request.query);
    return this.service.quests({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Quest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async quest(
    @common.Param() params: QuestWhereUniqueInput
  ): Promise<Quest | null> {
    const result = await this.service.quest({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Quest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQuest(
    @common.Param() params: QuestWhereUniqueInput,
    @common.Body() data: QuestUpdateInput
  ): Promise<Quest | null> {
    try {
      return await this.service.updateQuest({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Quest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQuest(
    @common.Param() params: QuestWhereUniqueInput
  ): Promise<Quest | null> {
    try {
      return await this.service.deleteQuest({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
